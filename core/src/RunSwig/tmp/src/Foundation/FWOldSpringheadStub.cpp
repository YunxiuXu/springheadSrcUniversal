#include "..\..\include\Springhead.h"
#include "..\..\include\Base\Env.h"
#include "..\..\include\Base\BaseDebug.h"
#include "..\Foundation\UTTypeDesc.h"
#include "..\Framework\FWOldSpringheadNodeHandler.h"
namespace Spr{

void RegisterTypeDescFWOldSpringhead(UTTypeDescDbIf* db){
	static bool bFirst=true;
	if (!bFirst) return;
	bFirst = false;

	UTTypeDescIf* desc;
	int field;
	SprOldSpringhead::Header* pHeader = NULL;
	desc = UTTypeDescIf::Create("Header");
	desc->SetSize(sizeof(SprOldSpringhead::Header));
	desc->SetAccess(DBG_NEW UTAccess<SprOldSpringhead::Header>);
	field = desc->AddField("", "unsigned", "major", "");
	desc->SetOffset(field, int((char*)&(pHeader->major) - (char*)pHeader));
	field = desc->AddField("", "unsigned", "minor", "");
	desc->SetOffset(field, int((char*)&(pHeader->minor) - (char*)pHeader));
	field = desc->AddField("", "unsigned", "flags", "");
	desc->SetOffset(field, int((char*)&(pHeader->flags) - (char*)pHeader));
	db->RegisterDesc(desc);
	SprOldSpringhead::Frame* pFrame = NULL;
	desc = UTTypeDescIf::Create("Frame");
	desc->SetSize(sizeof(SprOldSpringhead::Frame));
	desc->SetAccess(DBG_NEW UTAccess<SprOldSpringhead::Frame>);
	db->RegisterDesc(desc);
	SprOldSpringhead::FrameTransformMatrix* pFrameTransformMatrix = NULL;
	desc = UTTypeDescIf::Create("FrameTransformMatrix");
	desc->SetSize(sizeof(SprOldSpringhead::FrameTransformMatrix));
	desc->SetAccess(DBG_NEW UTAccess<SprOldSpringhead::FrameTransformMatrix>);
	field = desc->AddField("", "Affinef", "matrix", "");
	desc->SetOffset(field, int((char*)&(pFrameTransformMatrix->matrix) - (char*)pFrameTransformMatrix));
	db->RegisterDesc(desc);
	SprOldSpringhead::Light8* pLight8 = NULL;
	desc = UTTypeDescIf::Create("Light8");
	desc->SetSize(sizeof(SprOldSpringhead::Light8));
	desc->SetAccess(DBG_NEW UTAccess<SprOldSpringhead::Light8>);
	field = desc->AddField("XLightType", "enum", "type", "");
	desc->AddEnumConst(field, "XLIGHT_POINT", SprOldSpringhead::Light8::XLIGHT_POINT);
	desc->AddEnumConst(field, "XLIGHT_SPOT", SprOldSpringhead::Light8::XLIGHT_SPOT);
	desc->AddEnumConst(field, "XLIGHT_DIRECTIONAL", SprOldSpringhead::Light8::XLIGHT_DIRECTIONAL);
	desc->SetOffset(field, int((char*)&(pLight8->type) - (char*)pLight8));
	field = desc->AddField("", "Vec4f", "diffuse", "");
	desc->SetOffset(field, int((char*)&(pLight8->diffuse) - (char*)pLight8));
	field = desc->AddField("", "Vec4f", "specular", "");
	desc->SetOffset(field, int((char*)&(pLight8->specular) - (char*)pLight8));
	field = desc->AddField("", "Vec4f", "ambient", "");
	desc->SetOffset(field, int((char*)&(pLight8->ambient) - (char*)pLight8));
	field = desc->AddField("", "Vec3f", "position", "");
	desc->SetOffset(field, int((char*)&(pLight8->position) - (char*)pLight8));
	field = desc->AddField("", "Vec3f", "direction", "");
	desc->SetOffset(field, int((char*)&(pLight8->direction) - (char*)pLight8));
	field = desc->AddField("", "float", "range", "");
	desc->SetOffset(field, int((char*)&(pLight8->range) - (char*)pLight8));
	field = desc->AddField("", "float", "falloff", "");
	desc->SetOffset(field, int((char*)&(pLight8->falloff) - (char*)pLight8));
	field = desc->AddField("", "float", "attenuation0", "");
	desc->SetOffset(field, int((char*)&(pLight8->attenuation0) - (char*)pLight8));
	field = desc->AddField("", "float", "attenuation1", "");
	desc->SetOffset(field, int((char*)&(pLight8->attenuation1) - (char*)pLight8));
	field = desc->AddField("", "float", "attenuation2", "");
	desc->SetOffset(field, int((char*)&(pLight8->attenuation2) - (char*)pLight8));
	field = desc->AddField("", "float", "spotInner", "");
	desc->SetOffset(field, int((char*)&(pLight8->spotInner) - (char*)pLight8));
	field = desc->AddField("", "float", "spotCutoff", "");
	desc->SetOffset(field, int((char*)&(pLight8->spotCutoff) - (char*)pLight8));
	db->RegisterDesc(desc);
	SprOldSpringhead::Material* pMaterial = NULL;
	desc = UTTypeDescIf::Create("Material");
	desc->SetSize(sizeof(SprOldSpringhead::Material));
	desc->SetAccess(DBG_NEW UTAccess<SprOldSpringhead::Material>);
	field = desc->AddField("", "Vec4f", "face", "");
	desc->SetOffset(field, int((char*)&(pMaterial->face) - (char*)pMaterial));
	field = desc->AddField("", "float", "power", "");
	desc->SetOffset(field, int((char*)&(pMaterial->power) - (char*)pMaterial));
	field = desc->AddField("", "Vec3f", "specular", "");
	desc->SetOffset(field, int((char*)&(pMaterial->specular) - (char*)pMaterial));
	field = desc->AddField("", "Vec3f", "emissive", "");
	desc->SetOffset(field, int((char*)&(pMaterial->emissive) - (char*)pMaterial));
	db->RegisterDesc(desc);
	SprOldSpringhead::MeshFace* pMeshFace = NULL;
	desc = UTTypeDescIf::Create("MeshFace");
	desc->SetSize(sizeof(SprOldSpringhead::MeshFace));
	desc->SetAccess(DBG_NEW UTAccess<SprOldSpringhead::MeshFace>);
	field = desc->AddField("", "int", "nFaceVertexIndices", "");
	desc->SetOffset(field, int((char*)&(pMeshFace->nFaceVertexIndices) - (char*)pMeshFace));
	field = desc->AddField("vector", "int", "faceVertexIndices", "");
	desc->SetOffset(field, int((char*)&(pMeshFace->faceVertexIndices) - (char*)pMeshFace));
	db->RegisterDesc(desc);
	SprOldSpringhead::Mesh* pMesh = NULL;
	desc = UTTypeDescIf::Create("Mesh");
	desc->SetSize(sizeof(SprOldSpringhead::Mesh));
	desc->SetAccess(DBG_NEW UTAccess<SprOldSpringhead::Mesh>);
	field = desc->AddField("", "int", "nVertices", "");
	desc->SetOffset(field, int((char*)&(pMesh->nVertices) - (char*)pMesh));
	field = desc->AddField("vector", "Vec3f", "vertices", "");
	desc->SetOffset(field, int((char*)&(pMesh->vertices) - (char*)pMesh));
	field = desc->AddField("", "int", "nFaces", "");
	desc->SetOffset(field, int((char*)&(pMesh->nFaces) - (char*)pMesh));
	field = desc->AddField("vector", "MeshFace", "faces", "");
	desc->SetOffset(field, int((char*)&(pMesh->faces) - (char*)pMesh));
	db->RegisterDesc(desc);
	SprOldSpringhead::MeshNormals* pMeshNormals = NULL;
	desc = UTTypeDescIf::Create("MeshNormals");
	desc->SetSize(sizeof(SprOldSpringhead::MeshNormals));
	desc->SetAccess(DBG_NEW UTAccess<SprOldSpringhead::MeshNormals>);
	field = desc->AddField("", "int", "nNormals", "");
	desc->SetOffset(field, int((char*)&(pMeshNormals->nNormals) - (char*)pMeshNormals));
	field = desc->AddField("vector", "Vec3f", "normals", "");
	desc->SetOffset(field, int((char*)&(pMeshNormals->normals) - (char*)pMeshNormals));
	field = desc->AddField("", "int", "nFaceNormals", "");
	desc->SetOffset(field, int((char*)&(pMeshNormals->nFaceNormals) - (char*)pMeshNormals));
	field = desc->AddField("vector", "MeshFace", "faceNormals", "");
	desc->SetOffset(field, int((char*)&(pMeshNormals->faceNormals) - (char*)pMeshNormals));
	db->RegisterDesc(desc);
	SprOldSpringhead::MeshMaterialList* pMeshMaterialList = NULL;
	desc = UTTypeDescIf::Create("MeshMaterialList");
	desc->SetSize(sizeof(SprOldSpringhead::MeshMaterialList));
	desc->SetAccess(DBG_NEW UTAccess<SprOldSpringhead::MeshMaterialList>);
	field = desc->AddField("", "int", "nMaterials", "");
	desc->SetOffset(field, int((char*)&(pMeshMaterialList->nMaterials) - (char*)pMeshMaterialList));
	field = desc->AddField("", "int", "nFaceIndexes", "");
	desc->SetOffset(field, int((char*)&(pMeshMaterialList->nFaceIndexes) - (char*)pMeshMaterialList));
	field = desc->AddField("vector", "int", "faceIndexes", "");
	desc->SetOffset(field, int((char*)&(pMeshMaterialList->faceIndexes) - (char*)pMeshMaterialList));
	db->RegisterDesc(desc);
	SprOldSpringhead::IndexColor* pIndexColor = NULL;
	desc = UTTypeDescIf::Create("IndexColor");
	desc->SetSize(sizeof(SprOldSpringhead::IndexColor));
	desc->SetAccess(DBG_NEW UTAccess<SprOldSpringhead::IndexColor>);
	field = desc->AddField("", "int", "index", "");
	desc->SetOffset(field, int((char*)&(pIndexColor->index) - (char*)pIndexColor));
	field = desc->AddField("", "Vec4f", "indexColor", "");
	desc->SetOffset(field, int((char*)&(pIndexColor->indexColor) - (char*)pIndexColor));
	db->RegisterDesc(desc);
	SprOldSpringhead::MeshVertexColors* pMeshVertexColors = NULL;
	desc = UTTypeDescIf::Create("MeshVertexColors");
	desc->SetSize(sizeof(SprOldSpringhead::MeshVertexColors));
	desc->SetAccess(DBG_NEW UTAccess<SprOldSpringhead::MeshVertexColors>);
	field = desc->AddField("", "int", "nVertexColors", "");
	desc->SetOffset(field, int((char*)&(pMeshVertexColors->nVertexColors) - (char*)pMeshVertexColors));
	field = desc->AddField("vector", "IndexColor", "vertexColors", "nVertexColors");
	desc->SetOffset(field, int((char*)&(pMeshVertexColors->vertexColors) - (char*)pMeshVertexColors));
	db->RegisterDesc(desc);
	SprOldSpringhead::TextureFilename* pTextureFilename = NULL;
	desc = UTTypeDescIf::Create("TextureFilename");
	desc->SetSize(sizeof(SprOldSpringhead::TextureFilename));
	desc->SetAccess(DBG_NEW UTAccess<SprOldSpringhead::TextureFilename>);
	field = desc->AddField("", "string", "filename", "");
	desc->SetOffset(field, int((char*)&(pTextureFilename->filename) - (char*)pTextureFilename));
	db->RegisterDesc(desc);
	SprOldSpringhead::MeshTextureCoords* pMeshTextureCoords = NULL;
	desc = UTTypeDescIf::Create("MeshTextureCoords");
	desc->SetSize(sizeof(SprOldSpringhead::MeshTextureCoords));
	desc->SetAccess(DBG_NEW UTAccess<SprOldSpringhead::MeshTextureCoords>);
	field = desc->AddField("", "int", "nTextureCoords", "");
	desc->SetOffset(field, int((char*)&(pMeshTextureCoords->nTextureCoords) - (char*)pMeshTextureCoords));
	field = desc->AddField("vector", "Vec2f", "textureCoords", "");
	desc->SetOffset(field, int((char*)&(pMeshTextureCoords->textureCoords) - (char*)pMeshTextureCoords));
	db->RegisterDesc(desc);
	SprOldSpringhead::XSkinMeshHeader* pXSkinMeshHeader = NULL;
	desc = UTTypeDescIf::Create("XSkinMeshHeader");
	desc->SetSize(sizeof(SprOldSpringhead::XSkinMeshHeader));
	desc->SetAccess(DBG_NEW UTAccess<SprOldSpringhead::XSkinMeshHeader>);
	field = desc->AddField("", "int", "nMaxSkinWeightsPerVertex", "");
	desc->SetOffset(field, int((char*)&(pXSkinMeshHeader->nMaxSkinWeightsPerVertex) - (char*)pXSkinMeshHeader));
	field = desc->AddField("", "int", "nMaxSkinWeightsPerFace", "");
	desc->SetOffset(field, int((char*)&(pXSkinMeshHeader->nMaxSkinWeightsPerFace) - (char*)pXSkinMeshHeader));
	field = desc->AddField("", "int", "nBones", "");
	desc->SetOffset(field, int((char*)&(pXSkinMeshHeader->nBones) - (char*)pXSkinMeshHeader));
	db->RegisterDesc(desc);
	SprOldSpringhead::SkinWeights* pSkinWeights = NULL;
	desc = UTTypeDescIf::Create("SkinWeights");
	desc->SetSize(sizeof(SprOldSpringhead::SkinWeights));
	desc->SetAccess(DBG_NEW UTAccess<SprOldSpringhead::SkinWeights>);
	field = desc->AddField("", "string", "transformNodeName", "");
	desc->SetOffset(field, int((char*)&(pSkinWeights->transformNodeName) - (char*)pSkinWeights));
	field = desc->AddField("", "unsigned", "nWeights", "");
	desc->SetOffset(field, int((char*)&(pSkinWeights->nWeights) - (char*)pSkinWeights));
	field = desc->AddField("vector", "unsigned", "vertexIndices", "");
	desc->SetOffset(field, int((char*)&(pSkinWeights->vertexIndices) - (char*)pSkinWeights));
	field = desc->AddField("vector", "float", "weights", "");
	desc->SetOffset(field, int((char*)&(pSkinWeights->weights) - (char*)pSkinWeights));
	field = desc->AddField("", "Affinef", "matrixOffset", "");
	desc->SetOffset(field, int((char*)&(pSkinWeights->matrixOffset) - (char*)pSkinWeights));
	db->RegisterDesc(desc);
	SprOldSpringhead::Animation* pAnimation = NULL;
	desc = UTTypeDescIf::Create("Animation");
	desc->SetSize(sizeof(SprOldSpringhead::Animation));
	desc->SetAccess(DBG_NEW UTAccess<SprOldSpringhead::Animation>);
	db->RegisterDesc(desc);
	SprOldSpringhead::AnimationSet* pAnimationSet = NULL;
	desc = UTTypeDescIf::Create("AnimationSet");
	desc->SetSize(sizeof(SprOldSpringhead::AnimationSet));
	desc->SetAccess(DBG_NEW UTAccess<SprOldSpringhead::AnimationSet>);
	db->RegisterDesc(desc);
	SprOldSpringhead::FloatKeys* pFloatKeys = NULL;
	desc = UTTypeDescIf::Create("FloatKeys");
	desc->SetSize(sizeof(SprOldSpringhead::FloatKeys));
	desc->SetAccess(DBG_NEW UTAccess<SprOldSpringhead::FloatKeys>);
	field = desc->AddField("", "unsigned", "nValues", "");
	desc->SetOffset(field, int((char*)&(pFloatKeys->nValues) - (char*)pFloatKeys));
	field = desc->AddField("vector", "float", "values", "");
	desc->SetOffset(field, int((char*)&(pFloatKeys->values) - (char*)pFloatKeys));
	db->RegisterDesc(desc);
	SprOldSpringhead::TimedFloatKeys* pTimedFloatKeys = NULL;
	desc = UTTypeDescIf::Create("TimedFloatKeys");
	desc->SetSize(sizeof(SprOldSpringhead::TimedFloatKeys));
	desc->SetAccess(DBG_NEW UTAccess<SprOldSpringhead::TimedFloatKeys>);
	field = desc->AddField("", "unsigned", "time", "");
	desc->SetOffset(field, int((char*)&(pTimedFloatKeys->time) - (char*)pTimedFloatKeys));
	field = desc->AddField("", "FloatKeys", "tfkeys", "");
	desc->SetOffset(field, int((char*)&(pTimedFloatKeys->tfkeys) - (char*)pTimedFloatKeys));
	db->RegisterDesc(desc);
	SprOldSpringhead::AnimationKey* pAnimationKey = NULL;
	desc = UTTypeDescIf::Create("AnimationKey");
	desc->SetSize(sizeof(SprOldSpringhead::AnimationKey));
	desc->SetAccess(DBG_NEW UTAccess<SprOldSpringhead::AnimationKey>);
	field = desc->AddField("", "unsigned", "keyType", "");
	desc->SetOffset(field, int((char*)&(pAnimationKey->keyType) - (char*)pAnimationKey));
	field = desc->AddField("", "unsigned", "nKeys", "");
	desc->SetOffset(field, int((char*)&(pAnimationKey->nKeys) - (char*)pAnimationKey));
	field = desc->AddField("vector", "TimedFloatKeys", "keys", "");
	desc->SetOffset(field, int((char*)&(pAnimationKey->keys) - (char*)pAnimationKey));
	db->RegisterDesc(desc);
	SprOldSpringhead::AnimTicksPerSecond* pAnimTicksPerSecond = NULL;
	desc = UTTypeDescIf::Create("AnimTicksPerSecond");
	desc->SetSize(sizeof(SprOldSpringhead::AnimTicksPerSecond));
	desc->SetAccess(DBG_NEW UTAccess<SprOldSpringhead::AnimTicksPerSecond>);
	field = desc->AddField("", "unsigned", "hz", "");
	desc->SetOffset(field, int((char*)&(pAnimTicksPerSecond->hz) - (char*)pAnimTicksPerSecond));
	db->RegisterDesc(desc);
	SprOldSpringhead::Scene* pScene = NULL;
	desc = UTTypeDescIf::Create("Scene");
	desc->SetSize(sizeof(SprOldSpringhead::Scene));
	desc->SetAccess(DBG_NEW UTAccess<SprOldSpringhead::Scene>);
	db->RegisterDesc(desc);
	SprOldSpringhead::Simulator* pSimulator = NULL;
	desc = UTTypeDescIf::Create("Simulator");
	desc->SetSize(sizeof(SprOldSpringhead::Simulator));
	desc->SetAccess(DBG_NEW UTAccess<SprOldSpringhead::Simulator>);
	field = desc->AddField("", "double", "timeStep", "");
	desc->SetOffset(field, int((char*)&(pSimulator->timeStep) - (char*)pSimulator));
	field = desc->AddField("", "double", "decay", "");
	desc->SetOffset(field, int((char*)&(pSimulator->decay) - (char*)pSimulator));
	db->RegisterDesc(desc);
	SprOldSpringhead::Camera* pCamera = NULL;
	desc = UTTypeDescIf::Create("Camera");
	desc->SetSize(sizeof(SprOldSpringhead::Camera));
	desc->SetAccess(DBG_NEW UTAccess<SprOldSpringhead::Camera>);
	field = desc->AddField("", "Affinef", "view", "");
	desc->SetOffset(field, int((char*)&(pCamera->view) - (char*)pCamera));
	field = desc->AddField("", "float", "width", "");
	desc->SetOffset(field, int((char*)&(pCamera->width) - (char*)pCamera));
	field = desc->AddField("", "float", "height", "");
	desc->SetOffset(field, int((char*)&(pCamera->height) - (char*)pCamera));
	field = desc->AddField("", "float", "offsetX", "");
	desc->SetOffset(field, int((char*)&(pCamera->offsetX) - (char*)pCamera));
	field = desc->AddField("", "float", "offsetY", "");
	desc->SetOffset(field, int((char*)&(pCamera->offsetY) - (char*)pCamera));
	field = desc->AddField("", "float", "front", "");
	desc->SetOffset(field, int((char*)&(pCamera->front) - (char*)pCamera));
	field = desc->AddField("", "float", "back", "");
	desc->SetOffset(field, int((char*)&(pCamera->back) - (char*)pCamera));
	db->RegisterDesc(desc);
	SprOldSpringhead::Solid* pSolid = NULL;
	desc = UTTypeDescIf::Create("Solid");
	desc->SetSize(sizeof(SprOldSpringhead::Solid));
	desc->SetAccess(DBG_NEW UTAccess<SprOldSpringhead::Solid>);
	field = desc->AddField("", "float", "mass", "");
	desc->SetOffset(field, int((char*)&(pSolid->mass) - (char*)pSolid));
	field = desc->AddField("", "Matrix3f", "inertia", "");
	desc->SetOffset(field, int((char*)&(pSolid->inertia) - (char*)pSolid));
	field = desc->AddField("", "Vec3f", "velocity", "");
	desc->SetOffset(field, int((char*)&(pSolid->velocity) - (char*)pSolid));
	field = desc->AddField("", "Vec3f", "angularVelocity", "");
	desc->SetOffset(field, int((char*)&(pSolid->angularVelocity) - (char*)pSolid));
	field = desc->AddField("", "Vec3f", "center", "");
	desc->SetOffset(field, int((char*)&(pSolid->center) - (char*)pSolid));
	db->RegisterDesc(desc);
	SprOldSpringhead::Sphere* pSphere = NULL;
	desc = UTTypeDescIf::Create("Sphere");
	desc->SetSize(sizeof(SprOldSpringhead::Sphere));
	desc->SetAccess(DBG_NEW UTAccess<SprOldSpringhead::Sphere>);
	field = desc->AddField("", "float", "radius", "");
	desc->SetOffset(field, int((char*)&(pSphere->radius) - (char*)pSphere));
	field = desc->AddField("", "int", "slices", "");
	desc->SetOffset(field, int((char*)&(pSphere->slices) - (char*)pSphere));
	field = desc->AddField("", "int", "stacks", "");
	desc->SetOffset(field, int((char*)&(pSphere->stacks) - (char*)pSphere));
	db->RegisterDesc(desc);
	SprOldSpringhead::PhysicalMaterial* pPhysicalMaterial = NULL;
	desc = UTTypeDescIf::Create("PhysicalMaterial");
	desc->SetSize(sizeof(SprOldSpringhead::PhysicalMaterial));
	desc->SetAccess(DBG_NEW UTAccess<SprOldSpringhead::PhysicalMaterial>);
	field = desc->AddField("", "float", "ns", "");
	desc->SetOffset(field, int((char*)&(pPhysicalMaterial->ns) - (char*)pPhysicalMaterial));
	field = desc->AddField("", "float", "nd", "");
	desc->SetOffset(field, int((char*)&(pPhysicalMaterial->nd) - (char*)pPhysicalMaterial));
	field = desc->AddField("", "float", "fs", "");
	desc->SetOffset(field, int((char*)&(pPhysicalMaterial->fs) - (char*)pPhysicalMaterial));
	field = desc->AddField("", "float", "fd", "");
	desc->SetOffset(field, int((char*)&(pPhysicalMaterial->fd) - (char*)pPhysicalMaterial));
	field = desc->AddField("", "float", "s", "");
	desc->SetOffset(field, int((char*)&(pPhysicalMaterial->s) - (char*)pPhysicalMaterial));
	field = desc->AddField("", "float", "d", "");
	desc->SetOffset(field, int((char*)&(pPhysicalMaterial->d) - (char*)pPhysicalMaterial));
	db->RegisterDesc(desc);
	SprOldSpringhead::SolidContainer* pSolidContainer = NULL;
	desc = UTTypeDescIf::Create("SolidContainer");
	desc->SetSize(sizeof(SprOldSpringhead::SolidContainer));
	desc->SetAccess(DBG_NEW UTAccess<SprOldSpringhead::SolidContainer>);
	db->RegisterDesc(desc);
	SprOldSpringhead::GravityEngine* pGravityEngine = NULL;
	desc = UTTypeDescIf::Create("GravityEngine");
	desc->SetSize(sizeof(SprOldSpringhead::GravityEngine));
	desc->SetAccess(DBG_NEW UTAccess<SprOldSpringhead::GravityEngine>);
	field = desc->AddField("", "Vec3f", "gravity", "");
	desc->SetOffset(field, int((char*)&(pGravityEngine->gravity) - (char*)pGravityEngine));
	db->RegisterDesc(desc);
	SprOldSpringhead::ContactInactive* pContactInactive = NULL;
	desc = UTTypeDescIf::Create("ContactInactive");
	desc->SetSize(sizeof(SprOldSpringhead::ContactInactive));
	desc->SetAccess(DBG_NEW UTAccess<SprOldSpringhead::ContactInactive>);
	field = desc->AddField("", "int", "nSolids", "");
	desc->SetOffset(field, int((char*)&(pContactInactive->nSolids) - (char*)pContactInactive));
	field = desc->AddField("vector", "int", "solidIndexes", "");
	desc->SetOffset(field, int((char*)&(pContactInactive->solidIndexes) - (char*)pContactInactive));
	db->RegisterDesc(desc);
	SprOldSpringhead::ContactEngine* pContactEngine = NULL;
	desc = UTTypeDescIf::Create("ContactEngine");
	desc->SetSize(sizeof(SprOldSpringhead::ContactEngine));
	desc->SetAccess(DBG_NEW UTAccess<SprOldSpringhead::ContactEngine>);
	db->RegisterDesc(desc);
	SprOldSpringhead::JointEngine* pJointEngine = NULL;
	desc = UTTypeDescIf::Create("JointEngine");
	desc->SetSize(sizeof(SprOldSpringhead::JointEngine));
	desc->SetAccess(DBG_NEW UTAccess<SprOldSpringhead::JointEngine>);
	db->RegisterDesc(desc);
	SprOldSpringhead::Joint* pJoint = NULL;
	desc = UTTypeDescIf::Create("Joint");
	desc->SetSize(sizeof(SprOldSpringhead::Joint));
	desc->SetAccess(DBG_NEW UTAccess<SprOldSpringhead::Joint>);
	field = desc->AddField("", "int", "nType", "");
	desc->SetOffset(field, int((char*)&(pJoint->nType) - (char*)pJoint));
	field = desc->AddField("", "Vec3f", "prj", "");
	desc->SetOffset(field, int((char*)&(pJoint->prj) - (char*)pJoint));
	field = desc->AddField("", "Matrix3f", "pRj", "");
	desc->SetOffset(field, int((char*)&(pJoint->pRj) - (char*)pJoint));
	field = desc->AddField("", "Vec3f", "crj", "");
	desc->SetOffset(field, int((char*)&(pJoint->crj) - (char*)pJoint));
	field = desc->AddField("", "Matrix3f", "cRj", "");
	desc->SetOffset(field, int((char*)&(pJoint->cRj) - (char*)pJoint));
	field = desc->AddField("", "float", "fPosition", "");
	desc->SetOffset(field, int((char*)&(pJoint->fPosition) - (char*)pJoint));
	field = desc->AddField("", "float", "fVelocity", "");
	desc->SetOffset(field, int((char*)&(pJoint->fVelocity) - (char*)pJoint));
	field = desc->AddField("", "float", "fMaxTorque", "");
	desc->SetOffset(field, int((char*)&(pJoint->fMaxTorque) - (char*)pJoint));
	field = desc->AddField("", "float", "fMinPosition", "");
	desc->SetOffset(field, int((char*)&(pJoint->fMinPosition) - (char*)pJoint));
	field = desc->AddField("", "float", "fMaxPosition", "");
	desc->SetOffset(field, int((char*)&(pJoint->fMaxPosition) - (char*)pJoint));
	field = desc->AddField("", "int", "nInputType", "");
	desc->SetOffset(field, int((char*)&(pJoint->nInputType) - (char*)pJoint));
	field = desc->AddField("", "float", "fInput", "");
	desc->SetOffset(field, int((char*)&(pJoint->fInput) - (char*)pJoint));
	field = desc->AddField("", "float", "fPValue", "");
	desc->SetOffset(field, int((char*)&(pJoint->fPValue) - (char*)pJoint));
	field = desc->AddField("", "float", "fIValue", "");
	desc->SetOffset(field, int((char*)&(pJoint->fIValue) - (char*)pJoint));
	field = desc->AddField("", "float", "fDValue", "");
	desc->SetOffset(field, int((char*)&(pJoint->fDValue) - (char*)pJoint));
	db->RegisterDesc(desc);
}

}
